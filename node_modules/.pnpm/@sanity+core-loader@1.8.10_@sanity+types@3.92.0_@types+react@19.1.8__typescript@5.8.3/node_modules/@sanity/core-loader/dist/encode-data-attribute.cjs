"use strict";
Object.defineProperty(exports, "__esModule", { value: !0 });
var csm = require("@sanity/client/csm"), visualEditingCsm = require("@sanity/visual-editing-csm");
const encodeDataAttribute = (result, sourceMap, studioUrl, studioPathLike) => {
  if (!sourceMap || !studioUrl)
    return;
  const resultPath = csm.studioPathToJsonPath(studioPathLike), editInfo = csm.resolveEditInfo({
    resultPath,
    resultSourceMap: sourceMap,
    studioUrl
  });
  if (editInfo)
    return visualEditingCsm.encodeSanityNodeData({
      baseUrl: editInfo.baseUrl,
      workspace: editInfo.workspace,
      tool: editInfo.tool,
      type: editInfo.type,
      id: editInfo.id,
      path: typeof editInfo.path == "string" ? editInfo.path : csm.studioPath.toString(csm.jsonPathToStudioPath(editInfo.path))
    });
};
function defineEncodeDataAttribute(result, sourceMap, studioUrl, basePath) {
  const parse = (path) => path ? typeof path == "string" ? csm.studioPath.fromString(path) : path : [], parsedBasePath = parse(basePath);
  return Object.assign(
    (path) => encodeDataAttribute(result, sourceMap, studioUrl, [...parsedBasePath, ...parse(path)]),
    // The scope method creates a scoped version of encodeDataAttribute
    {
      scope: (scope) => defineEncodeDataAttribute(result, sourceMap, studioUrl, [
        ...parsedBasePath,
        ...parse(scope)
      ])
    }
  );
}
exports.defineEncodeDataAttribute = defineEncodeDataAttribute;
exports.encodeDataAttribute = encodeDataAttribute;
//# sourceMappingURL=encode-data-attribute.cjs.map
