{"version":3,"file":"enableLiveMode.js","sources":["../../src/live-mode/enableLiveMode.ts"],"sourcesContent":["import {\n  validateApiPerspective,\n  type ClientPerspective,\n  type ContentSourceMap,\n  type ContentSourceMapDocuments,\n  type QueryParams,\n  type SanityClient,\n} from '@sanity/client'\nimport {stegaEncodeSourceMap} from '@sanity/client/stega'\nimport {createNode, createNodeMachine} from '@sanity/comlink'\nimport {\n  createCompatibilityActors,\n  type LoaderControllerMsg,\n  type LoaderNodeMsg,\n} from '@sanity/presentation-comlink'\nimport {atom, type MapStore} from 'nanostores'\nimport type {EnableLiveModeOptions, QueryStoreState, SetFetcher} from '../types'\n\n/** @internal */\nexport interface LazyEnableLiveModeOptions extends EnableLiveModeOptions {\n  ssr: boolean\n  setFetcher: SetFetcher\n}\n\nconst LISTEN_HEARTBEAT_INTERVAL = 10_000\n\nexport function enableLiveMode(options: LazyEnableLiveModeOptions): () => void {\n  const {client, setFetcher, onConnect, onDisconnect, onPerspective} = options\n  if (!client) {\n    throw new Error(\n      `Expected \\`client\\` to be an instance of SanityClient: ${JSON.stringify(client)}`,\n    )\n  }\n  const {projectId, dataset, perspective} = client.config()\n\n  const $perspective = atom<Exclude<ClientPerspective, 'raw'>>(\n    perspective && perspective !== 'raw' ? perspective : 'drafts',\n  )\n  const $connected = atom(false)\n\n  const cache = new Map<\n    string,\n    {\n      projectId: string\n      dataset: string\n      perspective: ClientPerspective\n      query: string\n      params: QueryParams\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      result: any\n      resultSourceMap?: ContentSourceMap | undefined\n    }\n  >()\n\n  const comlink = createNode<LoaderNodeMsg, LoaderControllerMsg>(\n    {\n      name: 'loaders',\n      connectTo: 'presentation',\n    },\n    createNodeMachine<LoaderNodeMsg, LoaderControllerMsg>().provide({\n      actors: createCompatibilityActors<LoaderNodeMsg>(),\n    }),\n  )\n\n  comlink.onStatus(() => {\n    $connected.set(true)\n  }, 'connected')\n\n  comlink.on('loader/perspective', (data) => {\n    if (data.projectId === projectId && data.dataset === dataset) {\n      validateApiPerspective(data.perspective)\n      const nextPerspective = data.perspective === 'raw' ? 'drafts' : data.perspective\n      $perspective.set(nextPerspective)\n      onPerspective?.(nextPerspective)\n      updateLiveQueries()\n    }\n  })\n\n  comlink.on('loader/query-change', (data) => {\n    if (data.projectId === projectId && data.dataset === dataset) {\n      const {perspective, query, params} = data\n      if (\n        data.result !== undefined &&\n        data.resultSourceMap !== undefined &&\n        (client as SanityClient).config().stega.enabled\n      ) {\n        cache.set(JSON.stringify({perspective, query, params}), {\n          ...data,\n          result: stegaEncodeSourceMap(\n            data.result,\n            data.resultSourceMap,\n            (client as SanityClient).config().stega,\n          ),\n        })\n      } else {\n        cache.set(JSON.stringify({perspective, query, params}), data)\n      }\n\n      updateLiveQueries()\n    }\n  })\n\n  let unsetFetcher: (() => void) | undefined\n  const unlistenConnection = $connected.listen((connected) => {\n    if (connected) {\n      unsetFetcher = setFetcher({\n        hydrate: (query, params, initial) => {\n          const perspective = initial?.perspective || $perspective.get()\n          const key = JSON.stringify({\n            perspective,\n            query,\n            params,\n          })\n          const snapshot = cache.get(key)\n          if (snapshot?.result !== undefined && snapshot?.resultSourceMap !== undefined) {\n            return {\n              loading: false,\n              error: undefined,\n              data: snapshot.result,\n              sourceMap: snapshot.resultSourceMap,\n              perspective,\n            }\n          }\n\n          return {\n            loading:\n              ($connected.value === true && initial?.data === undefined) ||\n              initial?.sourceMap === undefined,\n            error: undefined,\n            data: initial?.data,\n            sourceMap: initial?.sourceMap,\n            perspective: initial?.perspective || 'published',\n          }\n        },\n        fetch: <QueryResponseResult, QueryResponseError>(\n          query: string,\n          params: QueryParams,\n          $fetch: MapStore<QueryStoreState<QueryResponseResult, QueryResponseError>>,\n          controller: AbortController,\n        ) => {\n          try {\n            const removeLiveQuery = addLiveQuery(query, params, $fetch)\n            controller.signal.addEventListener(\n              'abort',\n              () => {\n                removeLiveQuery()\n                updateLiveQueries()\n              },\n              {\n                once: true,\n              },\n            )\n            updateLiveQueries()\n            $fetch.setKey('error', undefined)\n            if (controller.signal.aborted) return\n          } catch (error: unknown) {\n            $fetch.setKey('error', error as QueryResponseError)\n            $fetch.setKey('loading', false)\n          }\n        },\n      })\n      onConnect?.()\n    } else {\n      unsetFetcher?.()\n      onDisconnect?.()\n    }\n  })\n\n  const liveQueries = new Set<{\n    query: string\n    params: QueryParams\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    $fetch: MapStore<QueryStoreState<any, any>>\n  }>()\n  const addLiveQuery = (\n    query: string,\n    params: QueryParams,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    $fetch: MapStore<QueryStoreState<any, any>>,\n  ) => {\n    const liveQuery = {query, params, $fetch}\n    liveQueries.add(liveQuery)\n    emitQueryListen()\n    const interval = setInterval(() => emitQueryListen(true), LISTEN_HEARTBEAT_INTERVAL)\n    return () => {\n      clearInterval(interval)\n      liveQueries.delete(liveQuery)\n      emitQueryListen()\n    }\n  }\n  const emitQueryListen = (skipSetLoading?: boolean) => {\n    if (!comlink) {\n      throw new Error('No connection')\n    }\n    const perspective = $perspective.get()\n    for (const {query, params, $fetch} of liveQueries) {\n      comlink.post('loader/query-listen', {\n        projectId: projectId!,\n        dataset: dataset!,\n        perspective,\n        query,\n        params,\n        heartbeat: LISTEN_HEARTBEAT_INTERVAL,\n      })\n      if (!skipSetLoading && $connected.value === true) {\n        $fetch.setKey('loading', true)\n      }\n      $fetch.setKey('perspective', perspective)\n    }\n  }\n  function updateLiveQueries() {\n    const perspective = $perspective.get()\n    const documentsOnPage: ContentSourceMapDocuments = []\n    // Loop over liveQueries and apply cache\n    for (const {query, params, $fetch} of liveQueries) {\n      const key = JSON.stringify({perspective, query, params})\n      const value = cache.get(key)\n      if (value) {\n        $fetch.set({\n          data: value.result,\n          error: undefined,\n          loading: false,\n          perspective,\n          sourceMap: value.resultSourceMap,\n        })\n        documentsOnPage.push(...(value.resultSourceMap?.documents ?? []))\n      }\n    }\n    comlink.post('loader/documents', {\n      projectId: projectId!,\n      dataset: dataset!,\n      perspective,\n      documents: documentsOnPage,\n    })\n  }\n\n  const stop = comlink.start()\n\n  return () => {\n    unsetFetcher?.()\n    unlistenConnection()\n    stop()\n    $connected.set(false)\n  }\n}\n"],"names":["perspective"],"mappings":"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"}