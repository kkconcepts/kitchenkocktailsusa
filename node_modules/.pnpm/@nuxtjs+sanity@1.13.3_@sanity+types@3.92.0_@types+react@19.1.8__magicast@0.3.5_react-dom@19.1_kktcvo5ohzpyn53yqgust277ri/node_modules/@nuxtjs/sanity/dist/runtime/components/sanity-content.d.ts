import type { Component, VNode } from 'vue';
import type { PortableTextBlock, ArbitraryTypedObject, PortableTextSpan, PortableTextMarkDefinition } from '@portabletext/types';
type Serializer = Component | string;
export interface Serializers {
    /** block components or elements that render non-blocks */
    types?: Record<string, Serializer>;
    /** inline components or elements */
    marks?: Record<string, Serializer>;
    /** block components or elements that wrap blocks instead of `<p>` tags */
    styles?: Record<string, Serializer>;
    listItem?: Serializer;
    container?: Serializer;
}
declare const _default: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    blocks: {
        type: () => Array<PortableTextBlock>;
        default: () => Array<PortableTextBlock>;
    };
    serializers: {
        type: () => Serializers;
        default: () => Serializers;
    };
}>, () => (string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}> | (string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>)[] | undefined)[], {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    blocks: {
        type: () => Array<PortableTextBlock>;
        default: () => Array<PortableTextBlock>;
    };
    serializers: {
        type: () => Serializers;
        default: () => Serializers;
    };
}>> & Readonly<{}>, {
    blocks: PortableTextBlock<PortableTextMarkDefinition, ArbitraryTypedObject | PortableTextSpan, string, string>[];
    serializers: Serializers;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export default _default;
